How did viewing a diff between two versions of a file help you see the bug that was introduced?

It was really easy to look into with the command provided
(diff for gitbash and fc for windows command prompt). I
could compare the two files easily. Previously, I would look
up the differences using Word, piece by piece to compare it.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

Having that access I can easily search for useful code that I
might have deleted, correct bugs, check for typos, see who did
changes to the file. I can even re use the old version of a file if I find that the last version was not as good.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

The pros are that you have more control over what you want to
save as a new version and so you'll be able to help others to better understand your changes, as they'll be more meaningful (they will have some annotations about the changes made, too). The cons are that it depends entirely on you, while with Google docs it makes the saving of versions for you, so even if you forget to save, you will have your file up to date. Also, because of this changes made probably won't be meaningful and you'll end up with lots of versions that don't just clutter up your space and don't even have any useful note about what is the difference between one and the other version.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

It is because of the more commonly use some people give to their files when using Git or Google Docs. For coding, you normally have many files that are interrelated and so Git is a solution for tracking versions. On the other hand, Google Docs is more oriented to another public, like text editing or sharing the view of some files, where the changes of the versions is not really that critical.

How can you use the commands git log and git diff to view the history of files?

With git log I can search all the commits that were made to the files and their corresponding commit id. With git diff I can compare two different commits and see what was added or deleted between two files.

How might using version control make you more confident to make changes that could break something?

It makes me more confident because I will be able to find bugs in a really fast way and also I will be able to return to a previous state of my program easily.

Now that you have your workspace set up, what do you want to try using Git for?

I would like to learn how to customize it even more and write the corresponding commands for it. I would like to use Git as the standard for the programs that I will start coding soon.

# generated by Git for Windows
#test -f ~/.profile && . ~/.profile
#test -f ~/.bashrc && . ~/.bashrc
