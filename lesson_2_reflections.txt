What happens when you initialize a repository? Why do you need to do it?

Everything that was inside the chosen working directory gets stored in a new .git hidden directory. It's neccessary so I can use  the functionalities of git by keeping track of version when I starting making commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is where all the files that can be commited are stored. The staging area is kind of a mid zone where files of the working directory are waiting to be commited and sent to the repository(all the selected ones at the same time).

How can you use the staging area to make sure you have one commit per logical change?

After I've made a change to a file in the working directory I can use the command 'git add <filename>' to 'move' it to the staging area. This way, I can control the files I move in using a logical change criteria. After moving the file to the staging area, I can use the 'get diff' command(with no arguments) to check the differences between the working directory and staging area files. Finally I'll commit the changes using the 'git commit' command and check again the differences between the stage area and the repository files using 'git diff --staged'.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

For example, if I want to create an easier version of a game I'm coding, I could create a new branch. Another example is when I'm adding some experimental new features that I want to test, but still have the main version intact. Branches are helpful because they help to keep track of different versions besides the main line I would normally code.

How do the diagrams help you visualize the branch structure?

Diagrams are graphical, so it makes it easier to know the structure of all the branches.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When you merge two branches together, you add all the content that was being worked separately into a single branch. We represent it that way as the new merged branch will have two parent commits.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

Git lets you merge two different commits easily as long as there are no conflicts. If Git finds a conflict, it will tell the user to manually fix it, as Git doesn't have the function to tell which is the best option out of two different sets of code.